<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git基本使用</title>
      <link href="/2023/02/09/2023-2-9-git%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/02/09/2023-2-9-git%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="git的基本知识"><a href="#git的基本知识" class="headerlink" title="git的基本知识"></a>git的基本知识</h1><h2 id="1-配置name和email"><a href="#1-配置name和email" class="headerlink" title="1.配置name和email"></a>1.配置name和email</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.xxx&quot;</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="2-使用git"><a href="#2-使用git" class="headerlink" title="2.使用git"></a>2.使用git</h2><pre><code>-查看当前仓库的状态-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>-初始化仓库-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>-文件状态-    1.未跟踪    2.已跟踪    3.暂存    4.未修改    5.已修改-未跟踪 → 暂存-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt; 将文件切换到暂存的状态</span><br><span class="line">git add * 将所有已修改（未跟踪）的文件暂存</span><br></pre></td></tr></table></figure>-暂存 → 未修改-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxxx&quot;</span> 将暂存的文件存储到仓库中</span><br><span class="line">git commit -a -m <span class="string">&quot;xxxx&quot;</span> 提交所有已修改的文件（未跟踪的文件不会提交）</span><br></pre></td></tr></table></figure>-未修改 → 修改-    -修改代码后，文件会变为修改状态-常用的命令-    -重置文件    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;filename&gt; <span class="comment"># 恢复文件</span></span><br><span class="line">git restore --staged &lt;filename&gt; <span class="comment"># 取消暂存状态</span></span><br></pre></td></tr></table></figure>    -删除文件-    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;filename&gt; <span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;filename&gt; -f <span class="comment"># 强制删除</span></span><br></pre></td></tr></table></figure>    -移动文件-    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> from to <span class="comment"># 移动文件 重命名文件</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><pre><code>git在存储文件时，每一次代码代码的提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看当前分支</span></span><br><span class="line">git branch &lt;branch name&gt; <span class="comment"># 创建新的分支</span></span><br><span class="line">git branch -d &lt;branch name&gt; <span class="comment"># 删除分支</span></span><br><span class="line">git switch &lt;branch name&gt; <span class="comment"># 切换分支</span></span><br><span class="line">git switch -c &lt;branch name&gt; <span class="comment"># 创建并切换分支</span></span><br><span class="line">git merge &lt;branch name&gt; <span class="comment"># 和并分支</span></span><br></pre></td></tr></table></figure>在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的分支合并到主分支中。</code></pre><h1 id="变基（rebase）"><a href="#变基（rebase）" class="headerlink" title="变基（rebase）"></a>变基（rebase）</h1><pre><code>在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并。我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;要变成的分支名&gt;</span><br></pre></td></tr></table></figure>原理（变基时发生了什么）：    1.当我们发起变基时，git会首先找到两条分支的最近的共同祖先    2.对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中    3.将当前部分指向目标的基底    4.以当前基底开始，重新执行历史操作变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。</code></pre><h1 id="远程仓库（remote）"><a href="#远程仓库（remote）" class="headerlink" title="远程仓库（remote）"></a>远程仓库（remote）</h1><pre><code>目前我对于git所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。我们学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee（码云）-将本地库上传git-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/kinia41/git-demo.git</span><br><span class="line"><span class="comment"># git remote add &lt;remote name&gt; &lt;url&gt;</span></span><br><span class="line"></span><br><span class="line">git branch -M main</span><br><span class="line"><span class="comment"># 修改分支的名字的为main</span></span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br><span class="line"><span class="comment"># git push 将代码上传服务器上</span></span><br></pre></td></tr></table></figure>-将本地库上传gitee-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee https://gitee.com/kinia41/vue-course.git</span><br><span class="line">git push -u gitee main</span><br></pre></td></tr></table></figure></code></pre><h1 id="远程库的操作的命令"><a href="#远程库的操作的命令" class="headerlink" title="远程库的操作的命令"></a>远程库的操作的命令</h1><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="comment"># 列出当前的关联的远程库</span></span><br><span class="line">git remote add &lt;远程库名&gt; &lt;url&gt; <span class="comment"># 关联远程仓库</span></span><br><span class="line">git remote remove &lt;远程库名&gt;  <span class="comment"># 删除远程库</span></span><br><span class="line">git push -u &lt;远程库名&gt; &lt;分支名&gt; <span class="comment"># 向远程库推送代码，并和当前分支关联</span></span><br><span class="line">git push &lt;远程库&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt; <span class="comment"># 从远程库下载代码</span></span><br><span class="line"></span><br><span class="line">git push <span class="comment"># 如果本地的版本低于远程库，push默认是推不上去</span></span><br><span class="line">git fetch <span class="comment"># 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span></span><br><span class="line">        <span class="comment"># 使用fetch拉取代码后，必须要手动对代码进行合并</span></span><br><span class="line">git pull  <span class="comment"># 从服务器上拉取代码并自动合并 </span></span><br></pre></td></tr></table></figure>注意：推送代码之前，一定要先从远程库中拉取最新的代码</code></pre><h1 id="标签（tag）"><a href="#标签（tag）" class="headerlink" title="标签（tag）"></a>标签（tag）</h1><pre><code>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c &lt;分支名&gt; &lt;提交<span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag 版本</span><br><span class="line">git tag 版本 提交<span class="built_in">id</span></span><br><span class="line">git push 远程仓库 标签名</span><br><span class="line">git push 远程仓库 --tags</span><br><span class="line">git tag -d 标签名 <span class="comment"># 删除标签</span></span><br><span class="line">git push 远程仓库 --delete 标签名 <span class="comment"># 删除远程标签</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h1><pre><code>默认情况下，git会监视项目中所有内容，但是有些内容比如node_modules目录中的内容，我们不希望它被git所管理。我们可以在项目目录中添加一个.gitignore文件，来设置那些需要git忽略的文件。</code></pre><h1 id="github的静态页面"><a href="#github的静态页面" class="headerlink" title="github的静态页面"></a>github的静态页面</h1><pre><code>在github中，可以将自己的静态页面之间部署到github中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。要求：    静态页面的分支必须叫做：gh-pages    如果希望页面可以通过xxx.github.io访问，则需要将库的名字配置为xxx.github.io</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站nginx代理过程</title>
      <link href="/2023/02/06/2023-2-6%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/06/2023-2-6%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="网站nginx代理过程"><a href="#网站nginx代理过程" class="headerlink" title="网站nginx代理过程"></a>网站nginx代理过程</h1><h2 id="1-申请服务器并在虚拟机中安装nginx-（yum-install-nginx）"><a href="#1-申请服务器并在虚拟机中安装nginx-（yum-install-nginx）" class="headerlink" title="1.申请服务器并在虚拟机中安装nginx （yum install nginx）"></a>1.申请服务器并在虚拟机中安装nginx （yum install nginx）</h2><pre><code>-通过whereis nginx 查看nginx的路径-通过nginx -v查看版本</code></pre><h2 id="2-修改nginx的配置"><a href="#2-修改nginx的配置" class="headerlink" title="2.修改nginx的配置"></a>2.修改nginx的配置</h2><pre><code>-进入cd /etc/nginx-修改配置文件 vim nginx.conf  (vim内的操作：输入i进入插入模式，esc退出后输入：wq 保存退出)    -在server&#123;&#125;内填入相应的网页资源路径（在/root路径下创建文件夹，比如/root/test/www/demo）代理等        -可配置多个server（也就是说nginx可以代理很多网站，只要端口号区分就行）    -此处端口号 不! 推! 荐! 使用80，配置的端口号要在服务器安全组内通过（1-65535全部放开就行）</code></pre><h2 id="3-在网页本地资源路径（放网页的文件夹）下通过git上传至linux"><a href="#3-在网页本地资源路径（放网页的文件夹）下通过git上传至linux" class="headerlink" title="3.在网页本地资源路径（放网页的文件夹）下通过git上传至linux"></a>3.在网页本地资源路径（放网页的文件夹）下通过git上传至linux</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r dist/ root@8.130.29.185:/root/test/www/demo</span><br></pre></td></tr></table></figure></code></pre><h2 id="4-nginx-s-stop-关闭nginx服务，然后在输入nginx启动"><a href="#4-nginx-s-stop-关闭nginx服务，然后在输入nginx启动" class="headerlink" title="4.nginx -s stop 关闭nginx服务，然后在输入nginx启动"></a>4.nginx -s stop 关闭nginx服务，然后在输入nginx启动</h2><h2 id="5-访问你的服务器公共地址并添加端口号，网站上线成功。"><a href="#5-访问你的服务器公共地址并添加端口号，网站上线成功。" class="headerlink" title="5.访问你的服务器公共地址并添加端口号，网站上线成功。"></a>5.访问你的服务器公共地址并添加端口号，网站上线成功。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/06/hello-world/"/>
      <url>/2023/02/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
