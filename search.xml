<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>防抖&amp;节流</title>
      <link href="/2023/02/17/2023-2-17-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2023/02/17/2023-2-17-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 (debounce)"></a>防抖 (debounce)</h1><p>核心思想：只保留最后一次操作（不断清空定时器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> debounce(fn, delay)&#123;</span><br><span class="line">    <span class="built_in">let</span> timer=null;</span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      <span class="keyword">if</span>(timer!=null)&#123;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">      timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        fn.apply(this, arguments);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="节流-（throttle）"><a href="#节流-（throttle）" class="headerlink" title="节流 （throttle）"></a>节流 （throttle）</h1><p>核心思想：通过定时器延迟操作次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> throttle(fn,delay)&#123;</span><br><span class="line">    <span class="built_in">let</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span>(...args)&#123; </span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                fn.apply(this,args);</span><br><span class="line">                flag=true;</span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">        flag=false;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/02/17/2023-2-17-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/02/17/2023-2-17-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>  快速排序的核心思想是设立一个轴，然后其他数据都和这个轴作比较，最后把轴放在序列的中间，<br>  执行完一遍快速排序后左边的数据都比轴小，右边的数据都比轴大。然后递归下去，当递归结束的时候就排好序了。<br>  快速排序的排序很快，但是当数据形成一边倒的情况的时候就发挥不出快速排序的优势。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> arr=[20,68,55,33,12,4,99,1,2]</span><br><span class="line"><span class="keyword">function</span> quickSort(arr=[],left,right)&#123;</span><br><span class="line">    //设置递归退出条件 left 和 right 是下标</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right) <span class="built_in">return</span>;</span><br><span class="line">    <span class="built_in">let</span> i=left;</span><br><span class="line">    <span class="built_in">let</span> j=right;</span><br><span class="line">    <span class="built_in">let</span> pivot=arr[i];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        //先从右边开始与哨兵判断，找出第一个比哨兵小的值</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[j]&gt;=pivot) j--;</span><br><span class="line">        //找到第一个比哨兵小的值，将它放到i的位置</span><br><span class="line">        arr[i]=arr[j];</span><br><span class="line">         //从左边开始与哨兵判断，找出第一个比哨兵大的值</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;arr[i]&lt;=pivot) i++;</span><br><span class="line">         //找到第一个比哨兵大的值，将它放到j的位置</span><br><span class="line">         arr[j]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i]=pivot;//i的位置是哨兵</span><br><span class="line">    //左边递归</span><br><span class="line">    quickSort(arr,left,i-1);  </span><br><span class="line">     //右边递归</span><br><span class="line">     quickSort(arr,i+1,right); </span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr,0,arr.length-1);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写call、apply、bind</title>
      <link href="/2023/02/17/2023-2-17-call%E3%80%81apply%E3%80%81bind/"/>
      <url>/2023/02/17/2023-2-17-call%E3%80%81apply%E3%80%81bind/</url>
      
        <content type="html"><![CDATA[<h1 id="思路都是："><a href="#思路都是：" class="headerlink" title="思路都是："></a>思路都是：</h1><pre><code> 1.将方法挂载到我们传入的ctx  2.将挂载以后的方法调用 3.将我们添加的这个属性删除</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> show(...args)&#123;</span><br><span class="line">    console.log(args);</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myCall=<span class="keyword">function</span>(ctx,...args)&#123;</span><br><span class="line">    ctx=(ctx===null||ctx===undefined)?globalThis:Object(ctx);</span><br><span class="line">    <span class="built_in">let</span> fn=Symbol(1);//防止属性重复</span><br><span class="line">    Object.defineProperty(ctx,fn,&#123;</span><br><span class="line">        enumerable:<span class="literal">false</span>,</span><br><span class="line">        value:this  //此处this是show函数</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">let</span> res=ctx[fn](...args)</span><br><span class="line">    delete ctx[fn]</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">show.myCall(&#123;name:<span class="string">&#x27;张三&#x27;</span>&#125;,1,2,3);</span><br></pre></td></tr></table></figure><h2 id="apply-参数是数组"><a href="#apply-参数是数组" class="headerlink" title="apply (参数是数组)"></a>apply (参数是数组)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply=<span class="keyword">function</span>(ctx,args=[])&#123;</span><br><span class="line">    ctx=(ctx===null||ctx===undefined)?globalThis:Object(ctx);</span><br><span class="line">    <span class="keyword">if</span>(args &amp;&amp; !(args instanceof Array))&#123;</span><br><span class="line">        throw(<span class="string">&#x27;参数只接受数组&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> fn=Symbol(1) //防止属性重复</span><br><span class="line">    Object.defineProperty(ctx,fn,&#123;</span><br><span class="line">        enumerable:<span class="literal">false</span>,</span><br><span class="line">        value:this  //此处this是show函数</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">let</span> res=ctx[fn](...args);</span><br><span class="line">    delete ctx[fn];</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">show.myApply(&#123;name:<span class="string">&#x27;李四&#x27;</span>&#125;,[1,2,3,4,5]);</span><br></pre></td></tr></table></figure><h2 id="bind（函数是返回值）"><a href="#bind（函数是返回值）" class="headerlink" title="bind（函数是返回值）"></a>bind（函数是返回值）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind=<span class="keyword">function</span>(ctx,...args1)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (...args2)=&gt;&#123;</span><br><span class="line">        ctx=(ctx===null||ctx===undefined)?globalThis:Object(ctx);</span><br><span class="line">        <span class="built_in">let</span> fn=Symbol(1) //防止属性重复</span><br><span class="line">        Object.defineProperty(ctx,fn,&#123;</span><br><span class="line">            enumerable:<span class="literal">false</span>,</span><br><span class="line">            value:this  //此处this是show函数</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">let</span> res=ctx[fn](...args1.concat(args2));</span><br><span class="line">        delete ctx[fn]</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">bind</span>=show.myBind(&#123;name:<span class="string">&#x27;王五&#x27;</span>&#125;,1,2,3);</span><br><span class="line"><span class="built_in">bind</span>(<span class="string">&#x27;bind传递的参数&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝问题</title>
      <link href="/2023/02/17/2023-2-17-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2023/02/17/2023-2-17-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a=&#123;</span><br><span class="line">b:1,</span><br><span class="line">c:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="方法一-Object-assign-target-…sources"><a href="#方法一-Object-assign-target-…sources" class="headerlink" title="方法一  Object.assign(target , …sources)"></a>方法一  Object.assign(target , …sources)</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a1=&#123;&#125;;</span><br><span class="line">Object.assign(a1,a);</span><br></pre></td></tr></table></figure></code></pre><h2 id="方法二-扩展运算符"><a href="#方法二-扩展运算符" class="headerlink" title="方法二  扩展运算符"></a>方法二  扩展运算符</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a1=&#123;...a&#125;;</span><br></pre></td></tr></table></figure></code></pre><h2 id="方法三-数组的slice-方法"><a href="#方法三-数组的slice-方法" class="headerlink" title="方法三  数组的slice()方法"></a>方法三  数组的slice()方法</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> arr=[1,2,3]</span><br><span class="line"><span class="built_in">let</span> arr1=arr.slice();</span><br></pre></td></tr></table></figure></code></pre><h2 id="手写浅拷贝-for-in实现"><a href="#手写浅拷贝-for-in实现" class="headerlink" title="手写浅拷贝  for in实现"></a>手写浅拷贝  for in实现</h2><pre><code>思路：判断源数据类型，如果是基本类型，直接返回源数据，如果是引用类型，for…in遍历源数据内部属性/元素<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">function</span> shallowClone(target)&#123;</span><br><span class="line">    <span class="keyword">if</span>(typeof target===<span class="string">&#x27;object&#x27;</span>&amp;&amp;target!==null)&#123;</span><br><span class="line">        <span class="built_in">let</span> newObj=target instanceof Array?[]:&#123;&#125;;</span><br><span class="line">        //筛出可枚举属性</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            //筛出自有属性 排除继承属性</span><br><span class="line">            <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line">                newObj[key]=target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> newObj;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        //源数据是基本类型数据，直接返回</span><br><span class="line">        <span class="built_in">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> obj=&#123;</span><br><span class="line">a:1,</span><br><span class="line">b:2,</span><br><span class="line">c:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> newObj=shallowClone(obj);</span><br></pre></td></tr></table></figure></code></pre><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><h2 id="方法一-JSON-parse-JSON-stringify-obj"><a href="#方法一-JSON-parse-JSON-stringify-obj" class="headerlink" title="方法一  JSON.parse(JSON.stringify(obj))"></a>方法一  JSON.parse(JSON.stringify(obj))</h2><h2 id="手写深拷贝-for-in-递归实现"><a href="#手写深拷贝-for-in-递归实现" class="headerlink" title="手写深拷贝  for in+递归实现"></a>手写深拷贝  for in+递归实现</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> deepClone(target)&#123;</span><br><span class="line"><span class="keyword">if</span>(typeof target===<span class="string">&#x27;object&#x27;</span>&amp;&amp;target!==null)&#123;</span><br><span class="line">    <span class="built_in">let</span> newObj=target instanceof Array?[]:&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(target[key] instanceof Object)&#123;</span><br><span class="line">            newObj[key]=deepClone(target[key]);  //递归<span class="built_in">clone</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newObj[key]=target[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">return</span> newObj;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> deepObj=&#123;</span><br><span class="line">    a:1,</span><br><span class="line">    b:2,</span><br><span class="line">    c:&#123;</span><br><span class="line">        d:3,</span><br><span class="line">        e:&#123;</span><br><span class="line">            f:4</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> deepCloneObj=deepClone(deepObj);</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack知识</title>
      <link href="/2023/02/10/2023-2-10-webpack%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/02/10/2023-2-10-webpack%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要webpack"><a href="#为什么需要webpack" class="headerlink" title="为什么需要webpack"></a>为什么需要webpack</h1><pre><code>当我们习惯了在node中编写代码的方式后，在回到前端编写html、css、js这些东西会感觉到各种的不便。比如：不能放心的使用模块化规范（浏览器兼容性问题）、即使可以使用模块化规范也会面临模块过多时的加载问题。我们就迫切的希望有一款工具可以对代码进行打包，将多个模块打包成一个文件。这样一来即解决了兼容性问题，又解决了模块过多的问题。构建工具就起到这样一个作用，通过构建工具可以将使用ESM规范编写的代码转换为旧的JS语法，这样可以使得所有的浏览器都可以支持代码。</code></pre><h1 id="webpack使用步骤"><a href="#webpack使用步骤" class="headerlink" title="webpack使用步骤"></a>webpack使用步骤</h1><pre><code>1.初始化项目npm init -y2.安装依赖webpack、webpack-cli3.在项目中创建src目录，然后编写代码（index.js）4.执行npx webpack来对代码进行打包（打包后观察dist目录）</code></pre><h1 id="配置文件（webpack-config-js）"><a href="#配置文件（webpack-config-js）" class="headerlink" title="配置文件（webpack.config.js）"></a>配置文件（webpack.config.js）</h1><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">   const path = require(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">// 引入html插件</span><br><span class="line">const HTMLPlugin = require(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: <span class="string">&quot;development&quot;</span>, // 设置打包的模式，production表示生产模式  development 开发模式</span><br><span class="line">    // entry: <span class="string">&quot;./hello/hello.js&quot;</span>, // 用来指定打包时的主文件 默认 ./src/index.js</span><br><span class="line">    // entry: [<span class="string">&quot;./src/a.js&quot;</span>, <span class="string">&quot;./src/b.js&quot;</span>],</span><br><span class="line">    // entry: &#123;</span><br><span class="line">    //     a: <span class="string">&quot;./src/a.js&quot;</span>,</span><br><span class="line">    //     b: <span class="string">&quot;./src/b.js&quot;</span></span><br><span class="line">    // &#125;,</span><br><span class="line">    // entry: <span class="string">&quot;./src/a.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        // path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>), // 指定打包的目录，必须要绝对路径</span><br><span class="line">        // filename: <span class="string">&quot;main.js&quot;</span>, // 打包后的文件名</span><br><span class="line">        // filename:<span class="string">&quot;[name]-[id]-[hash].js&quot;</span>,</span><br><span class="line">        clean: <span class="literal">true</span> // 自动清理打包目录</span><br><span class="line">    &#125;, // 配置代码打包后的地址</span><br><span class="line">    /* </span><br><span class="line">    webpack默认情况下，只会处理js文件，如果我们希望它可以处理其他类型的文件，则要为其引入loader</span><br><span class="line"></span><br><span class="line">    - 以css为例：</span><br><span class="line">        - 使用css-loader可以处理js中的样式</span><br><span class="line">        - 使用步骤：</span><br><span class="line">            1.安装：yarn add css-loader -D</span><br><span class="line">            2.配置：</span><br><span class="line">                module: &#123;</span><br><span class="line">                    rules: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">test</span>: /\.css$/i,</span><br><span class="line">                            use: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">*/</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.css$/i,</span><br><span class="line">                use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.(jpg|png|gif)$/i,</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&quot;asset/resource&quot;</span> // 图片直接资源类型的数据，可以通过指定<span class="built_in">type</span>来处理</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">test</span>: /\.m?js$/,</span><br><span class="line">                exclude: /(node_modules|bower_components)/,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new HTMLPlugin(&#123;</span><br><span class="line">            // title: <span class="string">&quot;Hello Webpack&quot;</span>,</span><br><span class="line">            template: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    devtool: <span class="string">&quot;inline-source-map&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">&quot;development&quot;</span>, // 设置打包的模式，production表示生产模式  development 开发模式</span><br></pre></td></tr></table></figure></code></pre><h2 id="entry-入口文件"><a href="#entry-入口文件" class="headerlink" title="entry(入口文件)"></a>entry(入口文件)</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    entry: <span class="string">&quot;./hello/hello.js&quot;</span>, // 用来指定打包时的主文件 默认 ./src/index.js</span><br><span class="line">// entry: [<span class="string">&quot;./src/a.js&quot;</span>, <span class="string">&quot;./src/b.js&quot;</span>],</span><br><span class="line">// entry: &#123;</span><br><span class="line">//     a: <span class="string">&quot;./src/a.js&quot;</span>,</span><br><span class="line">//     b: <span class="string">&quot;./src/b.js&quot;</span></span><br><span class="line">// &#125;,</span><br><span class="line">// entry: <span class="string">&quot;./src/a.js&quot;</span>,</span><br></pre></td></tr></table></figure></code></pre><h2 id="output-文件出口"><a href="#output-文件出口" class="headerlink" title="output(文件出口)"></a>output(文件出口)</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    // path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>), // 指定打包的目录，必须要绝对路径</span><br><span class="line">    // filename: <span class="string">&quot;main.js&quot;</span>, // 打包后的文件名</span><br><span class="line">    // filename:<span class="string">&quot;[name]-[id]-[hash].js&quot;</span>,</span><br><span class="line">    clean: <span class="literal">true</span> // 自动清理打包目录</span><br><span class="line">&#125;, // 配置代码打包后的地址</span><br></pre></td></tr></table></figure></code></pre><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><pre><code>webpack默认情况下，只会处理js文件，如果我们希望它可以处理其他类型的文件，则要为其引入loader - 以css为例：    - 使用css-loader可以处理js中的样式    - 使用步骤：        1.安装：yarn add css-loader -D        2.配置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                    <span class="built_in">test</span>: /\.css$/i,</span><br><span class="line">                    use: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p>babel是一个工具，可以将新的js语法转换为旧的js，以提高代码的兼容性。(写在loader中)<br>安装 npm install -D babel-loader @babel&#x2F;core @babel&#x2F;preset-env</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">test</span>: /\.m?js$/,</span><br><span class="line">     exclude: /(node_modules|bower_components)/,</span><br><span class="line">     use: &#123;</span><br><span class="line">       loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">       options: &#123;</span><br><span class="line">         presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>在package.json中设置兼容列表 <a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;defaults&quot;</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h2 id="plugin插件"><a href="#plugin插件" class="headerlink" title="plugin插件"></a>plugin插件</h2><p>插件用来为webpack来扩展功能<br>如 html-webpack-plugin 这个插件可以在打包代码后，自动在打包目录生成html页面<br>使用步骤：<br>    1.安装依赖<br>    2.配置插件<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    new HTMLPlugin(&#123;</span><br><span class="line">        // title: <span class="string">&quot;Hello Webpack&quot;</span>,</span><br><span class="line">        template: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="开发服务器（webpack-dev-server）"><a href="#开发服务器（webpack-dev-server）" class="headerlink" title="开发服务器（webpack-dev-server）"></a>开发服务器（webpack-dev-server）</h2><pre><code>安装：yarn add -D webpack-dev-server启动：yarn webpack serve --opendevtool:&quot;inline-source-map&quot;配置源码的映射</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git基本使用</title>
      <link href="/2023/02/09/2023-2-9-git%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/02/09/2023-2-9-git%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="git的基本知识"><a href="#git的基本知识" class="headerlink" title="git的基本知识"></a>git的基本知识</h1><h2 id="1-配置name和email"><a href="#1-配置name和email" class="headerlink" title="1.配置name和email"></a>1.配置name和email</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.xxx&quot;</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="2-使用git"><a href="#2-使用git" class="headerlink" title="2.使用git"></a>2.使用git</h2><pre><code>-查看当前仓库的状态-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>-初始化仓库-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>-文件状态-    1.未跟踪    2.已跟踪    3.暂存    4.未修改    5.已修改-未跟踪 → 暂存-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt; 将文件切换到暂存的状态</span><br><span class="line">git add * 将所有已修改（未跟踪）的文件暂存</span><br></pre></td></tr></table></figure>-暂存 → 未修改-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxxx&quot;</span> 将暂存的文件存储到仓库中</span><br><span class="line">git commit -a -m <span class="string">&quot;xxxx&quot;</span> 提交所有已修改的文件（未跟踪的文件不会提交）</span><br></pre></td></tr></table></figure>-未修改 → 修改-    -修改代码后，文件会变为修改状态-常用的命令-    -重置文件    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;filename&gt; <span class="comment"># 恢复文件</span></span><br><span class="line">git restore --staged &lt;filename&gt; <span class="comment"># 取消暂存状态</span></span><br></pre></td></tr></table></figure>    -删除文件-    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;filename&gt; <span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;filename&gt; -f <span class="comment"># 强制删除</span></span><br></pre></td></tr></table></figure>    -移动文件-    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> from to <span class="comment"># 移动文件 重命名文件</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><pre><code>git在存储文件时，每一次代码代码的提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看当前分支</span></span><br><span class="line">git branch &lt;branch name&gt; <span class="comment"># 创建新的分支</span></span><br><span class="line">git branch -d &lt;branch name&gt; <span class="comment"># 删除分支</span></span><br><span class="line">git switch &lt;branch name&gt; <span class="comment"># 切换分支</span></span><br><span class="line">git switch -c &lt;branch name&gt; <span class="comment"># 创建并切换分支</span></span><br><span class="line">git merge &lt;branch name&gt; <span class="comment"># 和并分支</span></span><br></pre></td></tr></table></figure>在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的分支合并到主分支中。</code></pre><h1 id="变基（rebase）"><a href="#变基（rebase）" class="headerlink" title="变基（rebase）"></a>变基（rebase）</h1><pre><code>在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并。我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;要变成的分支名&gt;</span><br></pre></td></tr></table></figure>原理（变基时发生了什么）：    1.当我们发起变基时，git会首先找到两条分支的最近的共同祖先    2.对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中    3.将当前部分指向目标的基底    4.以当前基底开始，重新执行历史操作变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。</code></pre><h1 id="远程仓库（remote）"><a href="#远程仓库（remote）" class="headerlink" title="远程仓库（remote）"></a>远程仓库（remote）</h1><pre><code>目前我对于git所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。我们学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee（码云）-将本地库上传git-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/kinia41/git-demo.git</span><br><span class="line"><span class="comment"># git remote add &lt;remote name&gt; &lt;url&gt;</span></span><br><span class="line"></span><br><span class="line">git branch -M main</span><br><span class="line"><span class="comment"># 修改分支的名字的为main</span></span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br><span class="line"><span class="comment"># git push 将代码上传服务器上</span></span><br></pre></td></tr></table></figure>-将本地库上传gitee-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee https://gitee.com/kinia41/vue-course.git</span><br><span class="line">git push -u gitee main</span><br></pre></td></tr></table></figure></code></pre><h1 id="远程库的操作的命令"><a href="#远程库的操作的命令" class="headerlink" title="远程库的操作的命令"></a>远程库的操作的命令</h1><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="comment"># 列出当前的关联的远程库</span></span><br><span class="line">git remote add &lt;远程库名&gt; &lt;url&gt; <span class="comment"># 关联远程仓库</span></span><br><span class="line">git remote remove &lt;远程库名&gt;  <span class="comment"># 删除远程库</span></span><br><span class="line">git push -u &lt;远程库名&gt; &lt;分支名&gt; <span class="comment"># 向远程库推送代码，并和当前分支关联</span></span><br><span class="line">git push &lt;远程库&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt; <span class="comment"># 从远程库下载代码</span></span><br><span class="line"></span><br><span class="line">git push <span class="comment"># 如果本地的版本低于远程库，push默认是推不上去</span></span><br><span class="line">git fetch <span class="comment"># 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span></span><br><span class="line">        <span class="comment"># 使用fetch拉取代码后，必须要手动对代码进行合并</span></span><br><span class="line">git pull  <span class="comment"># 从服务器上拉取代码并自动合并 </span></span><br></pre></td></tr></table></figure>注意：推送代码之前，一定要先从远程库中拉取最新的代码</code></pre><h1 id="标签（tag）"><a href="#标签（tag）" class="headerlink" title="标签（tag）"></a>标签（tag）</h1><pre><code>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c &lt;分支名&gt; &lt;提交<span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag 版本</span><br><span class="line">git tag 版本 提交<span class="built_in">id</span></span><br><span class="line">git push 远程仓库 标签名</span><br><span class="line">git push 远程仓库 --tags</span><br><span class="line">git tag -d 标签名 <span class="comment"># 删除标签</span></span><br><span class="line">git push 远程仓库 --delete 标签名 <span class="comment"># 删除远程标签</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h1><pre><code>默认情况下，git会监视项目中所有内容，但是有些内容比如node_modules目录中的内容，我们不希望它被git所管理。我们可以在项目目录中添加一个.gitignore文件，来设置那些需要git忽略的文件。</code></pre><h1 id="github的静态页面"><a href="#github的静态页面" class="headerlink" title="github的静态页面"></a>github的静态页面</h1><pre><code>在github中，可以将自己的静态页面之间部署到github中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。要求：    静态页面的分支必须叫做：gh-pages    如果希望页面可以通过xxx.github.io访问，则需要将库的名字配置为xxx.github.io</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站nginx代理过程</title>
      <link href="/2023/02/06/2023-2-6%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/06/2023-2-6%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="网站nginx代理过程"><a href="#网站nginx代理过程" class="headerlink" title="网站nginx代理过程"></a>网站nginx代理过程</h1><h2 id="1-申请服务器并在虚拟机中安装nginx-（yum-install-nginx）"><a href="#1-申请服务器并在虚拟机中安装nginx-（yum-install-nginx）" class="headerlink" title="1.申请服务器并在虚拟机中安装nginx （yum install nginx）"></a>1.申请服务器并在虚拟机中安装nginx （yum install nginx）</h2><pre><code>-通过whereis nginx 查看nginx的路径-通过nginx -v查看版本</code></pre><h2 id="2-修改nginx的配置"><a href="#2-修改nginx的配置" class="headerlink" title="2.修改nginx的配置"></a>2.修改nginx的配置</h2><pre><code>-进入cd /etc/nginx-修改配置文件 vim nginx.conf  (vim内的操作：输入i进入插入模式，esc退出后输入：wq 保存退出)    -在server&#123;&#125;内填入相应的网页资源路径（在/root路径下创建文件夹，比如/root/test/www/demo）代理等        -可配置多个server（也就是说nginx可以代理很多网站，只要端口号区分就行）    -此处端口号 不! 推! 荐! 使用80，配置的端口号要在服务器安全组内通过（1-65535全部放开就行）</code></pre><h2 id="3-在网页本地资源路径（放网页的文件夹）下通过git上传至linux"><a href="#3-在网页本地资源路径（放网页的文件夹）下通过git上传至linux" class="headerlink" title="3.在网页本地资源路径（放网页的文件夹）下通过git上传至linux"></a>3.在网页本地资源路径（放网页的文件夹）下通过git上传至linux</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r dist/ root@8.130.29.185:/root/test/www/demo</span><br></pre></td></tr></table></figure></code></pre><h2 id="4-nginx-s-stop-关闭nginx服务，然后在输入nginx启动"><a href="#4-nginx-s-stop-关闭nginx服务，然后在输入nginx启动" class="headerlink" title="4.nginx -s stop 关闭nginx服务，然后在输入nginx启动"></a>4.nginx -s stop 关闭nginx服务，然后在输入nginx启动</h2><h2 id="5-访问你的服务器公共地址并添加端口号，网站上线成功。"><a href="#5-访问你的服务器公共地址并添加端口号，网站上线成功。" class="headerlink" title="5.访问你的服务器公共地址并添加端口号，网站上线成功。"></a>5.访问你的服务器公共地址并添加端口号，网站上线成功。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/06/hello-world/"/>
      <url>/2023/02/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
